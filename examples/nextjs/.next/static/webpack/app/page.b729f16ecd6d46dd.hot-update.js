"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/../../src/adapter.ts":
/*!****************************!*\
  !*** ../../src/adapter.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WEBSIG_NAME: () => (/* binding */ WEBSIG_NAME),\n/* harmony export */   WebSigWalletAdapter: () => (/* binding */ WebSigWalletAdapter)\n/* harmony export */ });\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(app-pages-browser)/../../node_modules/@solana/wallet-adapter-base/lib/esm/signer.js\");\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(app-pages-browser)/../../node_modules/@solana/wallet-adapter-base/lib/esm/adapter.js\");\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(app-pages-browser)/../../node_modules/@solana/wallet-adapter-base/lib/esm/errors.js\");\n/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/wallet-adapter-base */ \"(app-pages-browser)/../../node_modules/@solana/wallet-adapter-base/lib/esm/transaction.js\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/../../node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ \"(app-pages-browser)/../../src/icon.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/../../node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\nconst WEBSIG_NAME = 'WebSig';\n// Production URL - change this when deploying\n// Use localhost in development, production URL otherwise\nconst WEBSIG_URL = process.env.NEXT_PUBLIC_WEBSIG_URL || ( true && window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://websig.xyz');\nclass WebSigWalletAdapter extends _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_2__.BaseMessageSignerWalletAdapter {\n    get publicKey() {\n        return this._publicKey;\n    }\n    get connecting() {\n        return this._connecting;\n    }\n    get readyState() {\n        if (false) {}\n        // Always show as \"Installed\" - WebSig is always ready!\n        // This makes the wallet selector call connect() directly instead of opening a URL\n        return _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_3__.WalletReadyState.Installed;\n    }\n    _handleMessage(event) {\n        // Security: Only accept messages from WebSig\n        if (event.origin !== WEBSIG_URL) return;\n        const { type, id, error, ...data } = event.data;\n        // Handle async responses\n        if (id && this._responseHandlers.has(id)) {\n            const { resolve, reject } = this._responseHandlers.get(id);\n            this._responseHandlers.delete(id);\n            if (error) {\n                reject(new Error(error));\n            } else {\n                resolve(data);\n            }\n            return;\n        }\n        // Handle events\n        switch(type){\n            case 'websig:connected':\n                this._publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(data.publicKey);\n                this.emit('connect', this._publicKey);\n                break;\n            case 'websig:disconnected':\n                this._handleDisconnect();\n                break;\n            case 'websig:accountChanged':\n                this._publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(data.publicKey);\n                // Emit disconnect and reconnect to notify of account change\n                this.emit('disconnect');\n                this.emit('connect', this._publicKey);\n                break;\n        }\n    }\n    async _sendMessage(method, params) {\n        if (!this.connected) {\n            throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotConnectedError();\n        }\n        const id = Math.random().toString(36).substr(2, 9);\n        return new Promise((resolve, reject)=>{\n            this._responseHandlers.set(id, {\n                resolve,\n                reject\n            });\n            // Send message to the iframe/window that has our wallet\n            window.postMessage({\n                source: 'websig-adapter',\n                id,\n                method,\n                params\n            }, WEBSIG_URL);\n            // Timeout after 30 seconds\n            setTimeout(()=>{\n                if (this._responseHandlers.has(id)) {\n                    this._responseHandlers.delete(id);\n                    reject(new Error('Request timeout'));\n                }\n            }, 30000);\n        });\n    }\n    async connect() {\n        try {\n            if (this.connected || this.connecting) return;\n            this._connecting = true;\n            // Build connection URL with DApp info\n            const url = new URL('/connect', WEBSIG_URL);\n            url.searchParams.set('origin', window.location.origin);\n            url.searchParams.set('name', document.title || 'DApp');\n            // Add DApp icon if available\n            const favicon = document.querySelector('link[rel=\"icon\"]');\n            if (favicon) {\n                url.searchParams.set('icon', favicon.href);\n            }\n            // Detect mobile for better UX\n            const isMobile = /iPhone|iPad|Android/i.test(navigator.userAgent);\n            // Check if we're in a cross-origin context\n            // Note: Different ports on localhost are considered cross-origin\n            const isCrossOrigin = window.location.origin !== WEBSIG_URL;\n            if (isMobile) {\n                // Mobile: Open in same tab with return URL\n                url.searchParams.set('return', window.location.href);\n                window.location.href = url.toString();\n            } else if (isCrossOrigin) {\n                // Cross-origin detected (e.g., localhost:3001 â†’ localhost:3000)\n                // Browser security prevents passkeys in cross-origin iframes\n                // Using popup as fallback for secure authentication\n                await this._createPopup(url.toString());\n            } else {\n                // Same-origin: Beautiful Porto-style integrated modal\n                // This provides the best UX when deployed on same domain\n                await this._createIntegratedModal(url.toString());\n            }\n        } catch (error) {\n            this.emit('error', error);\n            throw error;\n        } finally{\n            this._connecting = false;\n        }\n    }\n    async _createIntegratedModal(url) {\n        return new Promise((resolve, reject)=>{\n            // Hide any existing wallet modal (like the wallet selector)\n            const existingModals = document.querySelectorAll('.wallet-adapter-modal');\n            existingModals.forEach((modal)=>{\n                modal.style.display = 'none';\n            });\n            // Create native dialog element like Porto\n            const dialog = document.createElement('dialog');\n            dialog.dataset.websig = '';\n            dialog.setAttribute('role', 'dialog');\n            dialog.setAttribute('aria-label', 'WebSig Wallet');\n            // Style the dialog itself to be transparent\n            Object.assign(dialog.style, {\n                background: 'transparent',\n                border: '0',\n                outline: '0',\n                padding: '0',\n                position: 'fixed',\n                maxWidth: '100vw',\n                maxHeight: '100vh'\n            });\n            // Create iframe\n            const iframe = document.createElement('iframe');\n            iframe.setAttribute('data-testid', 'websig');\n            iframe.setAttribute('tabindex', '0');\n            iframe.setAttribute('title', 'WebSig');\n            // Allow clipboard access and other necessary permissions\n            // Include all WebAuthn permissions and mark as same-origin\n            iframe.setAttribute('allow', 'clipboard-read; clipboard-write; publickey-credentials-create *; publickey-credentials-get *; payment *');\n            iframe.src = url;\n            // Style iframe exactly like Porto's modal\n            Object.assign(iframe.style, {\n                backgroundColor: 'transparent',\n                border: '0',\n                borderRadius: '16px',\n                width: '380px',\n                maxWidth: '90vw',\n                height: '270px',\n                position: 'fixed',\n                left: '50%',\n                top: '50%',\n                transform: 'translate(-50%, -50%)',\n                zIndex: '999999'\n            });\n            // Add styles for backdrop and animations like Porto\n            const style = document.createElement('style');\n            style.innerHTML = '\\n        dialog[data-websig]::backdrop {\\n          background: rgba(0, 0, 0, 0.4);\\n          backdrop-filter: blur(4px);\\n        }\\n        @keyframes websigFadeIn {\\n          from { opacity: 0; }\\n          to { opacity: 1; }\\n        }\\n        @keyframes websigSlideUp {\\n          from { \\n            transform: translate(-50%, calc(-50% + 20px)) scale(0.95); \\n            opacity: 0; \\n          }\\n          to { \\n            transform: translate(-50%, -50%) scale(1); \\n            opacity: 1; \\n          }\\n        }\\n        iframe[data-testid=\"websig\"] {\\n          animation: websigSlideUp 0.2s ease;\\n        }\\n      ';\n            document.head.appendChild(style);\n            // Store body style to restore later (like Porto)\n            let bodyStyle = null;\n            let opener = null;\n            // Function to cleanup and restore\n            const cleanup = ()=>{\n                // Restore body scroll\n                if (bodyStyle) {\n                    Object.assign(document.body.style, bodyStyle);\n                    var _bodyStyle_overflow;\n                    document.body.style.overflow = (_bodyStyle_overflow = bodyStyle.overflow) !== null && _bodyStyle_overflow !== void 0 ? _bodyStyle_overflow : '';\n                }\n                // Close dialog\n                if (dialog.open) {\n                    dialog.close();\n                }\n                // Remove from DOM\n                if (dialog.parentNode) {\n                    dialog.remove();\n                }\n                // Remove styles\n                if (style.parentNode) {\n                    document.head.removeChild(style);\n                }\n                // Restore focus\n                opener === null || opener === void 0 ? void 0 : opener.focus();\n                opener = null;\n                // Restore hidden wallet modals\n                const existingModals = document.querySelectorAll('.wallet-adapter-modal');\n                existingModals.forEach((modal)=>{\n                    modal.style.display = '';\n                });\n            };\n            // Handle backdrop click (dialog handles this natively)\n            dialog.addEventListener('click', (e)=>{\n                // Check if click was on the backdrop (outside iframe)\n                const rect = iframe.getBoundingClientRect();\n                const clickedInside = e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom;\n                if (!clickedInside) {\n                    cleanup();\n                    if (!this.connected) {\n                        reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('Connection cancelled'));\n                    }\n                }\n            });\n            // Handle escape key (dialog handles this natively too)\n            dialog.addEventListener('cancel', (e)=>{\n                e.preventDefault();\n                cleanup();\n                if (!this.connected) {\n                    reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('Connection cancelled'));\n                }\n            });\n            // Listen for connection messages from iframe\n            const handleMessage = (event)=>{\n                // Check if the message is from our iframe (WebSig origin)\n                if (event.origin !== WEBSIG_URL) return;\n                if (event.data.type === 'websig:connected') {\n                    this._publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(event.data.publicKey);\n                    window.removeEventListener('message', handleMessage);\n                    cleanup();\n                    this.emit('connect', this._publicKey);\n                    resolve();\n                } else if (event.data.type === 'websig:rejected') {\n                    window.removeEventListener('message', handleMessage);\n                    cleanup();\n                    reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('User rejected the connection'));\n                }\n            };\n            window.addEventListener('message', handleMessage);\n            // Build dialog structure\n            dialog.appendChild(iframe);\n            document.body.appendChild(dialog);\n            // Store current focused element\n            if (document.activeElement instanceof HTMLElement) {\n                opener = document.activeElement;\n            }\n            // Store body styles and prevent scrolling\n            bodyStyle = Object.assign({}, document.body.style);\n            document.body.style.overflow = 'hidden';\n            // Show the dialog as modal (like Porto)\n            dialog.showModal();\n            iframe.focus();\n        });\n    }\n    async _createPopup(url) {\n        return new Promise((resolve, reject)=>{\n            // Calculate center position for optimal viewing\n            const width = 420;\n            const height = 600;\n            const left = Math.max(0, (window.screen.width - width) / 2);\n            const top = Math.max(0, (window.screen.height - height) / 2);\n            // Open popup window with clean, minimal chrome\n            const popup = window.open(url, 'WebSig Wallet', \"width=\".concat(width, \",height=\").concat(height, \",left=\").concat(left, \",top=\").concat(top, \",\") + \"resizable=no,scrollbars=yes,toolbar=no,menubar=no,location=no,status=no\");\n            if (!popup) {\n                reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('Please allow popups to connect your wallet'));\n                return;\n            }\n            // Listen for messages from the popup (WebSig will post a message when connected)\n            const handleMessage = (event)=>{\n                var _event_data, _event_data1;\n                // Verify the origin matches WEBSIG_URL\n                if (event.origin !== WEBSIG_URL) {\n                    return;\n                }\n                if (((_event_data = event.data) === null || _event_data === void 0 ? void 0 : _event_data.type) === 'websig:connected' && ((_event_data1 = event.data) === null || _event_data1 === void 0 ? void 0 : _event_data1.publicKey)) {\n                    // Connection successful\n                    window.removeEventListener('message', handleMessage);\n                    clearInterval(checkInterval);\n                    this._publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(event.data.publicKey);\n                    this.emit('connect', this._publicKey);\n                    // Close the popup\n                    popup.close();\n                    resolve();\n                }\n            };\n            window.addEventListener('message', handleMessage);\n            // Poll to check if popup was closed\n            const checkInterval = setInterval(()=>{\n                if (popup.closed) {\n                    clearInterval(checkInterval);\n                    window.removeEventListener('message', handleMessage);\n                    if (!this.connected) {\n                        reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('Connection cancelled'));\n                    }\n                }\n            }, 500);\n            // Timeout after 2 minutes\n            setTimeout(()=>{\n                clearInterval(checkInterval);\n                window.removeEventListener('message', handleMessage);\n                if (!this.connected && !popup.closed) {\n                    popup.close();\n                    reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('Connection timeout'));\n                }\n            }, 120000);\n        });\n    }\n    async disconnect() {\n        if (this.connected) {\n            try {\n                await this._sendMessage('disconnect');\n            } catch (e) {\n            // Ignore errors during disconnect\n            }\n        }\n        this._handleDisconnect();\n    }\n    _handleDisconnect() {\n        this._publicKey = null;\n        this._responseHandlers.clear();\n        this.emit('disconnect');\n    }\n    async signTransaction(transaction) {\n        try {\n            if (!this.connected) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotConnectedError();\n            // Serialize transaction\n            const serialized = (0,_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_5__.isVersionedTransaction)(transaction) ? Buffer.from(transaction.serialize()).toString('base64') : Buffer.from(transaction.serialize({\n                requireAllSignatures: false,\n                verifySignatures: false\n            })).toString('base64');\n            // Send to WebSig for signing\n            const response = await this._sendMessage('signTransaction', {\n                transaction: serialized,\n                options: {\n                    isVersioned: (0,_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_5__.isVersionedTransaction)(transaction)\n                }\n            });\n            // Deserialize and add signature\n            const signature = Buffer.from(response.signature, 'base64');\n            if ((0,_solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_5__.isVersionedTransaction)(transaction)) {\n                transaction.addSignature(this._publicKey, signature);\n            } else {\n                transaction.addSignature(this._publicKey, signature);\n            }\n            return transaction;\n        } catch (error) {\n            throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignTransactionError((error === null || error === void 0 ? void 0 : error.message) || 'Transaction signing failed');\n        }\n    }\n    async signAllTransactions(transactions) {\n        if (!this.connected) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotConnectedError();\n        // Sign one by one with user approval for each\n        const signed = [];\n        for (const transaction of transactions){\n            signed.push(await this.signTransaction(transaction));\n        }\n        return signed;\n    }\n    async signMessage(message) {\n        try {\n            if (!this.connected) throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotConnectedError();\n            const response = await this._sendMessage('signMessage', {\n                message: Buffer.from(message).toString('base64')\n            });\n            return Buffer.from(response.signature, 'base64');\n        } catch (error) {\n            throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignMessageError((error === null || error === void 0 ? void 0 : error.message) || 'Message signing failed');\n        }\n    }\n    constructor(){\n        super(), this.name = WEBSIG_NAME, this.url = WEBSIG_URL, this.icon = _icon__WEBPACK_IMPORTED_MODULE_1__.WEBSIG_ICON, this.supportedTransactionVersions = new Set([\n            'legacy',\n            0\n        ]), this._connecting = false, this._publicKey = null, this._responseHandlers = new Map();\n        if (true) {\n            window.addEventListener('message', this._handleMessage.bind(this));\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../src/adapter.ts\n"));

/***/ })

});